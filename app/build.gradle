apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: "kotlin-kapt"

apply plugin: 'com.ke.gson.plugin'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId "com.aboback.wanandroidjetpack"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1_000_001
        versionName "1.0.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        config {
            storeFile file('/Users/mac/jhb_projects/WanAndroidJetpack/AboBackKey')
            storePassword 'aboback'
            keyAlias = 'AboBack'
            keyPassword 'aboback'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
    }


    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation project(":base")
    implementation project(":network")

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //Room
    def room_version = "2.2.5"
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor
    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"


    // 弹性的 TabLayout
    implementation 'com.ogaclejapan.smarttablayout:library:2.0.0@aar'


    def kotlin_coroutines = '1.0.1'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines"

    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'


    implementation 'com.google.android:flexbox:2.0.0'

    implementation 'com.youth.banner:banner:2.1.0'

    //应用请求抓包
//    debugImplementation 'com.github.DingProg.NetworkCaptureSelf:library:v1.0.1'
    //doraemonkit
    //    debugImplementation 'com.didichuxing.doraemonkit:doraemonkit:3.1.5'

    implementation files('libs/tbs_sdk_thirdapp_v4.3.0.3_43903_sharewithdownloadwithfile_withoutGame_obfs_20200402_121309.jar')

    implementation 'com.tencent.bugly:crashreport:3.3.1'

    implementation 'com.google.protobuf:protobuf-lite:3.0.1'
//    implementation 'com.google.protobuf:protobuf-java:3.0.0'
//    implementation 'com.google.protobuf:protobuf-java:3.1.0'
//    implementation 'com.google.protobuf:protoc:3.1.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

apply plugin: 'com.google.protobuf'

protobuf {
    protoc {
        // Download from repositories
        artifact = 'com.google.protobuf:protoc:3.2.0'
    }
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
            }
        }
    }
}